# Raspberry Pi optimized Dockerfile for Tesseract-API
# Multi-stage build for ARM64 architecture

FROM node:20-alpine AS builder

# Install build dependencies for ARM64
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY nest-cli.json ./
COPY .prettierrc ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --no-audit --no-fund

# Copy source code
COPY src/ ./src/

# Build application using NestJS CLI
RUN npx nest build

# Clean up dev dependencies after build to reduce image size
RUN npm prune --production && \
    npm cache clean --force

# Production stage optimized for Raspberry Pi
FROM node:20-alpine AS production

# Install Tesseract with minimal footprint for Pi
RUN apk add --no-cache \
    tesseract-ocr \
    tesseract-ocr-data-deu \
    tesseract-ocr-data-eng \
    wget \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S tesseract -u 1001 -G nodejs

WORKDIR /app

# Copy built application and production dependencies with proper ownership
COPY --from=builder --chown=tesseract:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=tesseract:nodejs /app/dist ./dist
COPY --from=builder --chown=tesseract:nodejs /app/package*.json ./

# Copy entrypoint script
COPY --chown=tesseract:nodejs docker/docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Create temp directory with proper ownership before switching user
RUN mkdir -p /tmp/tesseract-api && \
    chown tesseract:nodejs /tmp/tesseract-api && \
    chmod 775 /tmp/tesseract-api

# Switch to non-root user
USER tesseract

# Expose port
EXPOSE 3000

# Optimized health check for Pi (less frequent to save resources)
HEALTHCHECK --interval=60s --timeout=10s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider --timeout=5 http://localhost:3000/ocr/status || exit 1

# Set Node.js memory limit for Pi (adjust based on available RAM)
ENV NODE_OPTIONS="--max-old-space-size=512"

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# Start application with Pi-optimized settings
CMD ["node", "--max-old-space-size=512", "dist/main.js"]